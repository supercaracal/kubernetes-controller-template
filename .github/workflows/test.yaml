---
# @see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
# @see https://github.com/actions/virtual-environments
name: Test
on:
  push:
    branches:
      - "*"
defaults:
  run:
    shell: bash
jobs:
  code:
    name: Code
    timeout-minutes: 15
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17"

      - name: Check out Go cache paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-cache::$(go env GOCACHE)"
          echo "::set-output name=go-mod-cache::$(go env GOMODCACHE)"

      - name: Cache GOCACHE
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-cache }}
          key: ${{ runner.os }}-go-cache-${{ hashFiles('*.go', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Cache GOMODCACHE
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod-cache }}
          key: ${{ runner.os }}-go-mod-cache-${{ hashFiles('go.sum', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-cache-

      - name: Get dependencies
        run: |
          go install golang.org/x/lint/golint@latest
          go install k8s.io/code-generator/...@latest

      - name: Generate several codes
        run: make codegen

      - name: Build
        run: make build

      - name: Lint
        run: make lint

      - name: Test
        run: make test
  image:
    name: Image
    timeout-minutes: 15
    runs-on: "ubuntu-latest"
    env:
      IMAGE_CACHE_DIR: /tmp/image_cache
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create cache directory
        run: mkdir -p $IMAGE_CACHE_DIR

      - name: Cache container images
        uses: actions/cache@v2
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-image-cache-${{ hashFiles('Dockerfile', 'go.sum', '**/go.sum', '*.go', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-image-cache-

      - name: Load container image cache
        run: |
          ls -la $IMAGE_CACHE_DIR
          for f in $(ls $IMAGE_CACHE_DIR/*.tar); do
            docker load < $f
          done

      - name: Lint container image
        run: |
          make lint-image
          docker save hadolint/hadolint > $IMAGE_CACHE_DIR/hadolint.tar

      - name: Create cluster with Kind
        run: kind create cluster

      - name: Apply manifests
        run: make apply-manifests

      - name: Build container image
        run: |
          make build-image
          docker save golang > $IMAGE_CACHE_DIR/golang.tar
          docker save kubernetes-controller-template > $IMAGE_CACHE_DIR/kubernetes-controller-template.tar
          danglings=$(docker images -q -f dangling=$TRUE_STR)
          for id in $danglings; do
            docker save $id > $IMAGE_CACHE_DIR/dangling_$id.tar
          done
        env:
          TRUE_STR: "true"

      - name: Start port forwarding for container registry
        run: make port-forward &

      - name: Push container image
        run: make push-image

      - name: Waiting for the pod to be ready
        run: |
          while :
          do
            status=$(kubectl --context=kind-kind get pods -o json | jq -r '.items[] | select(.metadata.name | contains("controller")) | .status.phase')
            if [[ $status = 'Running' ]]; then
              break
            fi
            echo 'Waiting for the pod to be ready...'
            sleep 3
          done

      - name: Get pod logs
        run: |
          name=$(kubectl --context=kind-kind get pods -o json | jq -r '.items[] | .metadata.name' | grep controller)
          kubectl --context=kind-kind logs $name | tee /dev/stderr | grep 'Hello world'
